from config import (
    BOT_TOKEN, MISTRAL_API_KEY, ADMINS, TECHCRUNCH_URL,
    COLLECTION_TIME, POSTING_TIME, CHANNEL_ID
)
from db import Database

from typing import Optional
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, InputMediaVideo
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from mistralai import Mistral
import aiohttp
from bs4 import BeautifulSoup
from datetime import datetime, timedelta, time
import asyncio
import pytz
import re
import json

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Mistral
mistral_client = Mistral(api_key=MISTRAL_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PostStates(StatesGroup):
    waiting_for_time = State()
    waiting_for_approval = State()
    waiting_for_media = State()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
posting_enabled = True
post_time = time(20, 0) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 20:00 (8 PM)
pending_post = None
pending_media = []
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
schedule_task = None
POST_NOTIFICATION_TEMPLATE = "üì¢ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ\n\nID —Å–æ–æ–±—â–µ–Ω–∏—è: `{message_id}`\n\n{text}"
articles_data = []  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–µ–π
used_articles = []  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—å–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø–æ—Å—Ç–µ
HTTP_TIMEOUT = 10
MAX_RETRIES = 2

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: str) -> bool:
    return str(user_id) in ADMINS

async def get_linked_chat_id():
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
    try:
        chat = await bot.get_chat(CHANNEL_ID)
        if chat.linked_chat_id:
            logger.info(f"–ù–∞–π–¥–µ–Ω linked_chat_id: {chat.linked_chat_id}")
            return chat.linked_chat_id
        logger.warning("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è linked_chat_id: {e}")
        return None

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
def get_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")],
            [KeyboardButton(text="‚úÖ –í–∫–ª. –∞–≤—Ç–æ–ø–æ—Å—Ç"), KeyboardButton(text="‚õî –í—ã–∫–ª. –∞–≤—Ç–æ–ø–æ—Å—Ç")],
            [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    return keyboard

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ—Å—Ç–∞
def get_approval_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"), KeyboardButton(text="üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton(text="üì∑ –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞")],
            [KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å"), KeyboardButton(text="‚è± –û—Ç–ª–æ–∂–∏—Ç—å")]
        ],
        resize_keyboard=True
    )
    return keyboard


async def send_error_to_admin(error_message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É"""
    try:
        for admin_id in ADMINS:
            await bot.send_message(
                chat_id=admin_id,
                text=f"üö® –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n\n{error_message}",
                reply_markup=get_admin_keyboard()
            )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É: {e}")

async def fetch_article_content(url: str) -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=HTTP_TIMEOUT)) as response:
                    if response.status == 200:
                        return await response.text()
                    logger.warning(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ {response.status} –¥–ª—è URL: {url}")
                    return None
        except asyncio.TimeoutError:
            logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt}/{MAX_RETRIES} –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é: {url}")
            if attempt == MAX_RETRIES:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫: {url}")
                return None
            await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ {url}: {str(e)}")
            return None
    return None

async def get_articles():
    """–°–±–æ—Ä —Å—Ç–∞—Ç–µ–π —Å TechCrunch —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    logger.info("–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π —Å TechCrunch")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        main_page_content = await fetch_article_content(TECHCRUNCH_URL)
        if not main_page_content:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É TechCrunch")
            return []
        
        soup = BeautifulSoup(main_page_content, 'html.parser')
        articles = []
        moscow_tz = pytz.timezone('Europe/Moscow')
        time_threshold = datetime.now(moscow_tz) - timedelta(hours=20)

        for card in soup.find_all('div', class_='loop-card__content'):
            try:
                title_link = card.find('h3', class_='loop-card__title').find('a', class_='loop-card__title-link')
                time_elem = card.find('time', class_='loop-card__time')
                
                if title_link and time_elem:
                    article_url = title_link['href']
                    article_time = datetime.fromisoformat(time_elem['datetime'].replace('Z', '+00:00'))
                    article_time = article_time.astimezone(moscow_tz)
                    
                    if article_time >= time_threshold:
                        article_html = await fetch_article_content(article_url)
                        if not article_html:
                            continue
                        
                        article_soup = BeautifulSoup(article_html, 'html.parser')
                        content = article_soup.find('div', class_='entry-content')
                        paragraphs = content.find_all('p', class_='wp-block-paragraph') if content else []
                        article_text = '\n'.join(p.get_text() for p in paragraphs)
                        
                        articles.append({
                            'url': article_url,
                            'title': title_link.get_text(),
                            'content': article_text
                        })
                        logger.info(f"–°–æ–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç—å—è: {title_link.get_text()}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏: {e}")
                continue
        
        logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(articles)} —Å—Ç–∞—Ç–µ–π")
        return articles
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–µ–π: {e}")
        await send_error_to_admin(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–µ–π: {e}")
        return []

async def compile_post(articles):
    """–ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
    logger.info("–ù–∞—á–∞–ª–æ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–æ—Å—Ç–∞")
    max_attempts = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    attempt = 0
    global used_articles
    
    while attempt < max_attempts:
        if not articles:
            logger.warning("–ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return None
    
        try:
            ### –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            selection_prompt = (
                "–í—ã–±–µ—Ä–∏ 3 —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. "
                "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON —Å –∫–ª—é—á–∞–º–∏: selected (–∏–Ω–¥–µ–∫—Å—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π 0-2), "
                "reason (–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞).\n\n" +
                "\n".join(f"{i}. {a['title']}" for i, a in enumerate(articles[:5])))
            
            try:
                selection_response = mistral_client.chat.complete(
                    model="mistral-large-latest",
                    messages=[{"role": "user", "content": selection_prompt}],
                    response_format={"type": "json_object"}
                )
                logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç Mistral (–≤—ã–±–æ—Ä —Å—Ç–∞—Ç–µ–π): {selection_response}")
            except asyncio.TimeoutError:
                logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç–µ–π")
                attempt += 1
                continue
                
            selection = json.loads(selection_response.choices[0].message.content)
            used_articles = [articles[i] for i in selection.get('selected', [0,1,2])]
            
            ### –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
            generation_prompt = (
                "–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞, –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç–∞—Ç–µ–π:" +
                "\n\n".join(f"{a['title']}\n{a['content'][:300]}..." for a in used_articles) +
                "\n\n–°–¥–µ–ª–∞–π –ø–æ—Å—Ç –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 800 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤—å —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç. "
                "–ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏. "
                "–ï—Å–ª–∏ –ø–æ—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, —Å–æ–∫—Ä–∞—Ç–∏ –µ–≥–æ, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ."
            )
            
            try:
                generation_response = mistral_client.chat.complete(
                    model="mistral-large-latest",
                    messages=[{"role": "user", "content": generation_prompt}]
                )
                logger.debug(f"–û—Ç–≤–µ—Ç –æ—Ç Mistral (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞): {generation_response}")
            except asyncio.TimeoutError:
                logger.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
                attempt += 1
                continue
                
            post = generation_response.choices[0].message.content
            
            if len(post) <= 1024:
                logger.info("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω")
                return post
            else:
                attempt += 1
                logger.warning(f"–ü–æ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(post)} —Å–∏–º–≤–æ–ª–æ–≤), –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}")
                
                if attempt < max_attempts:
                    for admin_id in ADMINS:
                        try:
                            await bot.send_message(
                                chat_id=admin_id,
                                text=f"‚ö†Ô∏è –ü–æ—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(post)} —Å–∏–º–≤–æ–ª–æ–≤). –ü—ã—Ç–∞—é—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts})..."
                            )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            await send_error_to_admin(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return None
    
    error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∫–æ—Ä–æ—á–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫"
    logger.error(error_msg)
    await send_error_to_admin(error_msg)
    return None
    
async def generate_daily_post():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"""
    global articles_data
    articles_data = await get_articles()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    if not articles_data:
        return "–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
        
    return await compile_post(articles_data)

async def schedule_post():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ –ú–°–ö"""
    global posting_enabled, post_time, pending_post, pending_media
    
    while True:
        if not posting_enabled:
            await asyncio.sleep(3600)
            continue
            
        now = datetime.now(pytz.timezone('Europe/Moscow'))
        today_post_time = now.replace(hour=post_time.hour, minute=post_time.minute, second=0, microsecond=0)
        
        if now < today_post_time:
            next_post_time = today_post_time
        else:
            next_post_time = today_post_time + timedelta(days=1)
        
        sleep_seconds = (next_post_time - now).total_seconds()
        logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç –≤ {next_post_time.strftime('%d.%m.%Y %H:%M')} –ú–°–ö")
        await asyncio.sleep(sleep_seconds)
        
        if not posting_enabled:
            continue
            
        post_content = await generate_daily_post()
        if post_content:
            pending_post = post_content
            pending_media = []
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMINS:
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=f"üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:\n\n{post_content}",
                        reply_markup=get_approval_keyboard()
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if is_admin(message.from_user.id):
        await message.answer(
            f"ü§ñ –ë–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post_time.strftime('%H:%M')} –ú–°–ö\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å", lambda message: is_admin(message.from_user.id))
async def cmd_help(message: types.Message):
    help_text = (
        "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "üîÑ –°—Ç–∞—Ç—É—Å - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n"
        "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
        "‚úÖ –í–∫–ª. –∞–≤—Ç–æ–ø–æ—Å—Ç - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
        "‚õî –í—ã–∫–ª. –∞–≤—Ç–æ–ø–æ—Å—Ç - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
        "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç —Å–µ–π—á–∞—Å\n\n"
        "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:\n"
        "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª\n"
        "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞\n"
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é\n"
        "üì∑ –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ - –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ\n"
        "üö´ –û—Ç–º–µ–Ω–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç\n"
        "‚è± –û—Ç–ª–æ–∂–∏—Ç—å - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–∑–∂–µ"
    )
    await message.answer(help_text, reply_markup=get_admin_keyboard())

@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
async def manual_post(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
        
    global pending_post, pending_media
    pending_media = []
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await message.answer("üîÑ –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç—å–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...", 
                        reply_markup=types.ReplyKeyboardRemove())
    
    try:
        post_content = await generate_daily_post()
        if not post_content:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                               reply_markup=get_admin_keyboard())
            return
            
        pending_post = post_content
        await message.answer(
            f"üìù –ü–æ—Å—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n{post_content}",
            reply_markup=get_approval_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMINS:
            if str(admin_id) != str(message.from_user.id):
                try:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=f"üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç {message.from_user.full_name}:\n\n{post_content}",
                        reply_markup=get_approval_keyboard()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                           reply_markup=get_admin_keyboard())

@dp.message(F.text == "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", lambda message: is_admin(message.from_user.id))
async def approve_post(message: types.Message):
    global pending_post, pending_media, used_articles
    
    if not pending_post:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        linked_chat_id = await get_linked_chat_id()
        if not linked_chat_id:
            logger.warning("–£ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            await message.answer("‚ö†Ô∏è –ß–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # 2. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
        if pending_media:
            media = [
                InputMediaPhoto(media=m['file_id'], caption=pending_post if i == 0 else None)
                if m['type'] == 'photo' else
                InputMediaVideo(media=m['file_id'], caption=pending_post if i == 0 else None)
                for i, m in enumerate(pending_media)
            ]
            sent_messages = await bot.send_media_group(CHANNEL_ID, media=media)
            channel_message_id = sent_messages[0].message_id
            media_group_id = sent_messages[0].media_group_id
        else:
            sent_message = await bot.send_message(CHANNEL_ID, text=pending_post)
            channel_message_id = sent_message.message_id
            media_group_id = None
        
        # 3. –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        discussion_message_id = None
        if linked_chat_id:
            try:
                await asyncio.sleep(2)
                updates = await bot.get_updates(limit=10, timeout=3)
                
                for update in updates:
                    msg = update.message
                    if not msg:
                        continue
                        
                    if media_group_id and hasattr(msg, 'media_group_id'):
                        if (msg.chat.id == linked_chat_id and 
                            msg.media_group_id == media_group_id):
                            discussion_message_id = msg.message_id
                            break
                    elif (msg.chat.id == linked_chat_id and
                          msg.text == pending_post):
                        discussion_message_id = msg.message_id
                        break
                
                logger.info(f"–ù–∞–π–¥–µ–Ω ID –≤ —á–∞—Ç–µ: {discussion_message_id}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = Database()
        urls = [a['url'] for a in used_articles] if used_articles else None
        url = json.dumps(urls) if urls else None  # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ JSON
        
        try:
            inserted_post = await db.insert_post(
                telegram_id=discussion_message_id,
                message_text=pending_post,
                url=url,
                user_id=message.from_user.id,
                username=message.from_user.full_name
            )
            
            if inserted_post:
                notification_text = f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω (ID: {inserted_post.get('id')})"
                logger.info(notification_text)
            else:
                notification_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
                logger.error(notification_text)
            
        except Exception as e:
            error_msg = str(e)
            if "violates foreign key constraint" in error_msg:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º parent_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                match = re.search(r'parent_id=(\d+)', error_msg)
                parent_id = match.group(1) if match else "unknown"
                notification_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: parent_id={parent_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            else:
                notification_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {error_msg}"
            
            logger.error(notification_text)
        
        # 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMINS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode="Markdown",
                    reply_markup=get_admin_keyboard()
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        # 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if used_articles:
            sources_text = "üîó *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*\n" + "\n".join(
                f"{i+1}. [{a['title']}]({a['url']})" for i, a in enumerate(used_articles)
            )
            await message.answer(
                sources_text,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )
        
        # 7. –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        pending_post = None
        pending_media = []
        used_articles = []
        
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}"
        logger.error(error_msg)
        await message.answer(error_msg)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        for admin_id in ADMINS:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=error_msg,
                    reply_markup=get_admin_keyboard()
                )
            except Exception as send_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {send_error}")

@dp.message(F.text == "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", lambda message: is_admin(message.from_user.id))
async def regenerate_post(message: types.Message):
    global pending_post, pending_media
    pending_media = []
    
    await message.answer("üîÑ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞...", reply_markup=types.ReplyKeyboardRemove())
    
    post_content = await generate_daily_post()
    if post_content:
        pending_post = post_content
        await message.answer(
            f"üìù –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞:\n\n{post_content}",
            reply_markup=get_approval_keyboard()
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", reply_markup=get_admin_keyboard())

@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", lambda message: is_admin(message.from_user.id))
async def edit_post_manually(message: types.Message, state: FSMContext):
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(PostStates.waiting_for_approval)

@dp.message(F.text == "üì∑ –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", lambda message: is_admin(message.from_user.id))
async def add_media_to_post(message: types.Message, state: FSMContext):
    await message.answer(
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(PostStates.waiting_for_media)

@dp.message(F.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å", lambda message: is_admin(message.from_user.id))
async def cancel_post(message: types.Message):
    global pending_post, pending_media
    pending_post = None
    pending_media = []
    await message.answer(
        "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_admin_keyboard()
    )   

@dp.message(F.text == "‚è± –û—Ç–ª–æ–∂–∏—Ç—å", lambda message: is_admin(message.from_user.id))
async def postpone_post(message: types.Message):
    await message.answer(
        "‚è± –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–∑–∂–µ",
        reply_markup=get_admin_keyboard()
    )

@dp.message(PostStates.waiting_for_media, F.photo | F.video, lambda message: is_admin(message.from_user.id))
async def process_media(message: types.Message, state: FSMContext):
    global pending_media
    
    if message.photo:
        file_id = message.photo[-1].file_id
        pending_media.append({'type': 'photo', 'file_id': file_id})
    elif message.video:
        file_id = message.video.file_id
        pending_media.append({'type': 'video', 'file_id': file_id})
    
    await message.answer(
        "üìé –ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –ø–æ—Å—Ç—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(PostStates.waiting_for_media, Command("done"), lambda message: is_admin(message.from_user.id))
async def finish_adding_media(message: types.Message, state: FSMContext):
    await message.answer(
        f"üìù –ü–æ—Å—Ç —Å –º–µ–¥–∏–∞ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:\n\n{pending_post}",
        reply_markup=get_approval_keyboard()
    )
    await state.clear()

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", lambda message: is_admin(message.from_user.id))
async def cancel_post(message: types.Message):
    global pending_post, pending_media
    pending_post = None
    pending_media = []
    await message.answer(
        "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_admin_keyboard()
    )

@dp.message(F.text == "‚õî –í—ã–∫–ª. –∞–≤—Ç–æ–ø–æ—Å—Ç", lambda message: is_admin(message.from_user.id))
async def disable_posting(message: types.Message):
    global posting_enabled
    if posting_enabled:
        posting_enabled = False
        await message.answer("‚õî –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω!", reply_markup=get_admin_keyboard())
    else:
        await message.answer("‚ÑπÔ∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω", reply_markup=get_admin_keyboard())

@dp.message(F.text == "‚úÖ –í–∫–ª. –∞–≤—Ç–æ–ø–æ—Å—Ç", lambda message: is_admin(message.from_user.id))
async def enable_posting(message: types.Message):
    global posting_enabled
    if not posting_enabled:
        posting_enabled = True
        await message.answer("‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω!", reply_markup=get_admin_keyboard())
    else:
        await message.answer("‚ÑπÔ∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É–∂–µ –≤–∫–ª—é—á–µ–Ω", reply_markup=get_admin_keyboard())

@dp.message(F.text == "üîÑ –°—Ç–∞—Ç—É—Å", lambda message: is_admin(message.from_user.id))
async def post_status(message: types.Message):
    global post_time
    next_post_time = datetime.now(pytz.timezone('Europe/Moscow')).replace(hour=post_time.hour, minute=post_time.minute, second=0, microsecond=0)
    
    if datetime.now(pytz.timezone('Europe/Moscow')) > next_post_time:
        next_post_time += timedelta(days=1)
    
    await message.answer(
        f"–°—Ç–∞—Ç—É—Å: {'üü¢ –í–∫–ª—é—á–µ–Ω' if posting_enabled else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω'}\n"
        f"–°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: {next_post_time.strftime('%d.%m.%Y –≤ %H:%M')} –ú–°–ö",
        reply_markup=get_admin_keyboard()
    )

@dp.message(F.text == "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", lambda message: is_admin(message.from_user.id))
async def cmd_set_time(message: types.Message, state: FSMContext):
    await message.answer(
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00):",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(PostStates.waiting_for_time)

@dp.message(PostStates.waiting_for_time, lambda message: is_admin(message.from_user.id))
async def process_set_time(message: types.Message, state: FSMContext):
    global post_time, schedule_task
    
    time_pattern = re.compile(r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$')
    
    if not time_pattern.match(message.text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00)")
        return
    
    try:
        hours, minutes = map(int, message.text.split(':'))
        post_time = time(hours, minutes)
        
        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é
        if schedule_task:
            schedule_task.cancel()
            try:
                await schedule_task
            except asyncio.CancelledError:
                pass
                
        schedule_task = asyncio.create_task(schedule_post())
        
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {post_time.strftime('%H:%M')} –ú–°–ö",
            reply_markup=get_admin_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20:00)")

async def on_startup():
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
                     f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post_time.strftime('%H:%M')} –ú–°–ö",
                reply_markup=get_admin_keyboard()
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@dp.message()
async def unhandled_message(message: types.Message):
    logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

async def main():
    global schedule_task
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await on_startup()
    schedule_task = asyncio.create_task(schedule_post())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())